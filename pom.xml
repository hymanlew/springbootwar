<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.2.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.hyman</groupId>
	<artifactId>springbootwar</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>springbootwar</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<!-- 在使用外置 server 容器时，必须移除嵌入式tomcat插件 -->
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<!-- 必须指定为这个值，因为打包后就是 tomcat 环境中运行的 -->
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>4.0.0</version>
			<!-- 必须指定为这个值 -->
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- 原生的连接数据库的 jdbc 接口格式-->
		<!-- 此处引入 jdbc 只能测试底层用的，demo，实际环境下不会直接用底层技术的，而是 mybatis -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>

		<!-- 连接到 mysql -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>

		<!-- json jar-->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>2.8.11</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.8.11</version>
		</dependency>

		<!-- springData 默认基于 Hibernate 的数据库处理包 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<!-- 引入 jedis 框架 -->
		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
			<version>2.9.0</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-pool2</artifactId>
			<version>2.5.0</version>
		</dependency>

		<!--
			热部署插件，
			该模块在完整的打包环境下运行的时候会被禁用。如果你使用java -jar启动应用或者用一个特定的classloader启动，它会认为这是一个“生产环境”。
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>1.1.14</version>
		</dependency>

		<!-- 引入自定义 starter -->
		<dependency>
			<groupId>com.hyman.starter</groupId>
			<artifactId>hyman-spring-boot-starter</artifactId>
			<version>1.0-SNAPSHOT</version>
		</dependency>

		<!--
		全文检索，Spring Boot 通过整合 Spring Data ElasticSearch 提供了非常便捷的检索功能支持（默认的）。

		Elasticsearch JAVA操作有三种客户端：
			1、TransportClient。2、JestClient。3、RestClient

		Java与ElasticSearch连接的两种方式：（1）使用Transport与ElasticSearch建立连接。（2）使用SpringDataElasticSearch连接连接

		两种方式的优缺点：
		（1）优点：脱离框架，集成过程中不需要考虑与Spring的版本兼容问题，容易集成。缺点：使用原生API操作ES，代码量大，撰写困难

        （2）优点：将原生API进行封装，提供了ElasticsearchRepository，操作ES非常简单，与JPA同理。缺点：出生于Spring家族，与SpringBoot，SpringData版本容易冲突

		修改 docker 容器中 config 中的 elasticsearch.yml文件（最好只做修改不要随便添加，只删除注释即可）：
			cluster.name: 集群名称
			node.name: 节点名称
			path.data: 数据文件的路径
			path.logs: 日志文件的路径
			bootstrap.memory_lock: true 启动时是否锁内存，建议锁内存
			network.host 绑定ip地址，默认0.0.0.0表示所有地址，绑定了ip地址，将暴露在公网中，注意安全防护
			http.port:9200 端口号
			http.cors.enabled: true
			http.cors.allow-origin: "*"
			transport.tcp.port: 9300

		打印查看 es 服务器上的日志，boot 中的日志，从 parent 中看版本号
			-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-elasticsearch</artifactId>
		</dependency>
		<!-- ES 的 jest 所需包 -->
		<dependency>
			<groupId>io.searchbox</groupId>
			<artifactId>jest</artifactId>
		</dependency>

		<!-- 邮件功能 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<!-- 热部署插件设置 -->
				<configuration>
					<fork>true</fork>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
